#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

&sl {
    release-after-ms = <9999>;
};

/ {

    behaviors {
      #include "macros.dtsi"

      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
      };
      /*
      skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        // /delete-property/ release-after-ms;
      };
	  */
      /*
      phone_lshft: phone_style_lshft {
          compatible = "zmk,behavior-tap-dance";
          label = "PHONE_STYLE_LSHFT";
          #binding-cells = <0>;
          tapping-term-ms = <1000>;
          // /delete-property/ tapping-term-ms;
          bindings = <&skq LSHFT>, <&kt LSHFT>, <&kt LSHFT>;
      };
	  */
    };
	
	/*
	macros {
        to_shift_layer: to_shift_layer {
            label = "To shift enabled layer";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap & 4>
				, <&macro_tap &skq LSHFT>
                ;
        };
		
		to_shiftlocked_layer: tog_shiftlocked_layer {
			label = "Toggle shiftlocked layer";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
                = <&macro_tap &to 5>
                , <&macro_tap &kt RSHFT>
                ;
		};
		
		to_default_layer: tog_default_layer {
			label = "Back to default layer";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
                = <&macro_tap &to 0>
                , <&macro_tap &kt RSHFT>
                ;
		};
    };
	*/

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog 1                                                                       &mo 3 &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &kp MINUS
        &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &none                                                                        &none &kp Y  &kp U  &kp I     &kp O    &kp P    &kp BSLH
        &kp ESC   &kp A     &kp S    &kp D    &kp F      &kp G  &none           &kp LCTRL &kp LALT             &kp LGUI  &kp RCTRL           &none &kp H  &kp J  &kp K     &kp L    &kp SEMI &kp SQT
        &sl 4 &kp Z     &kp X    &kp C    &kp V      &kp B         &none    &none     &kp HOME &none &none &kp PG_UP &none     &none           &kp N  &kp M  &kp COMMA &kp DOT  &kp FSLH &kp sl 4
        &mo 2     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp BSPC &kp DEL   &kp END              &kp PG_DN &kp ENTER &kp SPACE              &kp UP &kp DOWN  &kp LBKT &kp RBKT &mo 2
      >;
    };
    keypad {
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &trans                                                                       &mo 3 &kp N6 &kp KP_NUM &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp MINUS
        &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &none                                                                        &none &kp Y  &kp KP_N7  &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp BSLH
        &kp ESC   &kp A     &kp S    &kp D    &kp F      &kp G  &none           &kp LCTRL &kp LALT             &kp LGUI  &kp RCTRL           &none &kp H  &kp KP_N4  &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &kp SQT
        &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B         &none    &none     &kp HOME &none &none &kp PG_UP &none     &none           &kp N  &kp KP_N1  &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &kp RSHFT
        &mo 2     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp BSPC &kp DEL   &kp END              &kp PG_DN &kp ENTER &kp KP_N0              &kp UP     &kp DOWN     &kp KP_DOT    &kp RBKT        &mo 2
      >;
    };
    fn {
      bindings = <
        &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &tog 1                                                       &mo 3 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
        &trans &trans &trans &trans &trans &trans  &none                                                       &none &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans  &none        &trans &trans             &trans &trans        &none &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans        &none  &none  &trans &none &none &trans &none  &none        &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans             &trans &trans &trans              &trans &trans &trans  &trans  &trans
      >;
    };
    mod {
      bindings = <
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                                                          &trans                 &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none
        &none &none        &none        &none        &none        &none        &bootloader                                                                                                    &bootloader            &none        &none        &none        &none        &none        &none
        &none &none        &none        &none        &none        &none        &rgb_ug RGB_MEFS_CMD 5                 &bt BT_CLR &bt BT_CLR             &bt BT_CLR &bt BT_CLR                 &rgb_ug RGB_MEFS_CMD 5 &none        &none        &none        &none        &none        &none
        &none &none        &none        &none        &none        &none                               &none           &none      &none      &none &none &none      &none      &none                                  &none        &none        &none        &none        &none        &none
        &none &none        &none        &bl BL_INC   &bl BL_DEC                                       &rgb_ug RGB_TOG &bl BL_TOG &none                  &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none        &none        &none
      >;
    };
	
    shift_enabled_layer {
      bindings = <
        &kp LS(EQUAL) &kp LS(N1)    &kp LS(N2)   &kp LS(N3)   &kp LS(N4)     &kp LS(N5) &tog 1                                                                       &mo 3 &kp LS(N6) &kp LS(N7) &kp LS(N8)    &kp LS(N9)   &kp LS(N0)   &kp LS(MINUS)
        &kp LS(TAB)   &kp LS(Q)     &kp LS(W)    &kp LS(E)    &kp LS(R)      &kp LS(T)  &none                                                                        &none &kp LS(Y)  &kp LS(U)  &kp LS(I)     &kp LS(O)    &kp LS(P)    &kp LS(BSLH)
        &kp LS(ESC)   &kp LS(A)     &kp LS(S)    &kp LS(D)    &kp LS(F)      &kp LS(G)  &none           &kp LS(LCTRL) &kp LS(LALT)             &kp LS(LGUI)  &kp LS(RCTRL)           &none &kp LS(H)  &kp LS(J)  &kp LS(K)     &kp LS(L)    &kp LS(SEMI) &kp LS(SQT)
        &tog 5 &kp LS(Z)     &kp LS(X)    &kp LS(C)    &kp LS(V)      &kp LS(B)         &none    &none     &kp LS(HOME) &none &none &kp LS(PG_UP) &none     &none           &kp LS(N)  &kp LS(M)  &kp LS(COMMA) &kp LS(DOT)  &kp LS(FSLH) &tog 5
        &mo 2     &kp LS(GRAVE) &kp LS(CAPS) &kp LS(LEFT) &kp LS(RIGHT)                &kp LS(BSPC) &kp LS(DEL)   &kp LS(END)              &kp LS(PG_DN) &kp LS(ENTER) &kp LS(SPACE)              &kp LS(UP) &kp LS(DOWN)  &kp LS(LBKT) &kp LS(RBKT) &mo 2
      >;
    };
	
	shiftlocked_layer {
      bindings = <
        &kp LS(EQUAL) &kp LS(N1)    &kp LS(N2)   &kp LS(N3)   &kp LS(N4)     &kp LS(N5) &tog 1                                                                       &mo 3 &kp LS(N6) &kp LS(N7) &kp LS(N8)    &kp LS(N9)   &kp LS(N0)   &kp LS(MINUS)
        &kp LS(TAB)   &kp LS(Q)     &kp LS(W)    &kp LS(E)    &kp LS(R)      &kp LS(T)  &none                                                                        &none &kp LS(Y)  &kp LS(U)  &kp LS(I)     &kp LS(O)    &kp LS(P)    &kp LS(BSLH)
        &kp LS(ESC)   &kp LS(A)     &kp LS(S)    &kp LS(D)    &kp LS(F)      &kp LS(G)  &none           &kp LS(LCTRL) &kp LS(LALT)             &kp LS(LGUI)  &kp LS(RCTRL)           &none &kp LS(H)  &kp LS(J)  &kp LS(K)     &kp LS(L)    &kp LS(SEMI) &kp LS(SQT)
        &to 0 &kp LS(Z)     &kp LS(X)    &kp LS(C)    &kp LS(V)      &kp LS(B)         &none    &none     &kp LS(HOME) &none &none &kp LS(PG_UP) &none     &none           &kp LS(N)  &kp LS(M)  &kp LS(COMMA) &kp LS(DOT)  &kp LS(FSLH) &to 0
        &mo 2     &kp LS(GRAVE) &kp LS(CAPS) &kp LS(LEFT) &kp LS(RIGHT)                &kp LS(BSPC) &kp LS(DEL)   &kp LS(END)              &kp LS(PG_DN) &kp LS(ENTER) &kp LS(SPACE)              &kp LS(UP) &kp LS(DOWN)  &kp LS(LBKT) &kp LS(RBKT) &mo 2
      >;
    };	
  };
};
